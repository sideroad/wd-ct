#!/usr/bin/env node

// Run WdCT.
var opts = require('opts'),
    options = {};

opts.parse([
  {
    'short': 't',
    'long': 'testcase',
    'description': 'Target testcase file',
    'value': true
  },
  {
    'short': 'i',
    'long': 'interaction',
    'description': 'Target interaction file',
    'value': true
  },
  {
    'long': 'store',
    'description': 'Prepare stored variable before execution (JSON format)',
    'value': true
  },
  {
    'short': 'nl',
    'long': 'no-logging',
    'description': 'Not output logging',
  },
  {
    'short': 'b',
    'long': 'browsers',
    'description': 'Browser ( comma separatted )',
    'value': true
  },
  {
    'short': 'nc',
    'long': 'no-color',
    'description': 'Not apply color to console',
  },
  {
    'long': 'scaffold',
    'description': 'Generate interaction script and testcase file from template'
  },
  {
    'short': 'sw',
    'long': 'stepwise',
    'description': 'Stepwise execution'
  },
  {
    'short': 'pe',
    'long': 'pause-on-error',
    'description': 'Pause on error'
  },
  {
    'short': 'sc',
    'long': 'start-column',
    'description': 'Interation start column index number should be set',
    'value': true
  },
  {
    'short': 'rn',
    'long': 'rownum',
    'description': 'Execute only specified row number test',
    'value': true
  },
  {
    'short': 'sl',
    'long': 'saucelabs',
    'description': 'Use saucelabs ( Please set SAUCE_USERNAME, SAUCE_ACCESS_KEY environment before execute )'
  },
  {
    'short': 'es',
    'long': 'error-screenshot',
    'description': 'Capture page when error occurred. please set captured image directory path',
    'value': true
  },
  {
    'short': 'f',
    'long': 'force',
    'description': 'Continue to execute test even though error occurred'
  },
  {
    'short': 'h',
    'long': 'help',
    'description': 'Display usage'
  }
]);

if(opts.get('scaffold')){
  var WdCTScaffold = require('../src/wd-ct-scaffold');
  new WdCTScaffold({
    testcase: opts.get('testcase')
  });
} else {

  options.testcase = opts.get('testcase');
  options.interaction = opts.get('interaction');

  if( (!options.testcase && !options.interaction) || 
        opts.get('help')){

    console.log(
      '##############################################\n'+
      '#  ██╗    ██╗██████╗        ██████╗████████╗ #\n'+
      '#  ██║    ██║██╔══██╗      ██╔════╝╚══██╔══╝ #\n'+
      '#  ██║ █╗ ██║██║  ██║█████╗██║        ██║    #\n'+
      '#  ██║███╗██║██║  ██║╚════╝██║        ██║    #\n'+
      '#  ╚███╔███╔╝██████╔╝      ╚██████╗   ██║    #\n'+
      '#   ╚══╝╚══╝ ╚═════╝        ╚═════╝   ╚═╝    #\n'+
      '##############################################\n'
    );
    opts.help();
    process.exit();
  }

  var noLogging = opts.get('no-logging');
  if(noLogging) {
    options.debug = false;
  }

  var noColor = opts.get('no-color');
  if(noColor) {
    options.color = false;
  }

  var browsers = opts.get('browsers');
  if(browsers){
    options.browsers =  browsers.split(',');
  }

  var stepwise = opts.get('stepwise');
  if(stepwise){
    options.stepwise = true;
  }

  var startColumn = opts.get('start-column');
  if(startColumn){
    options.startColumn = Number(startColumn);
  }

  var errorScreenshot = opts.get('error-screenshot');
  if(errorScreenshot){
    options.errorScreenshot = errorScreenshot;
  }

  var pauseOnError = opts.get('pause-on-error');
  if(pauseOnError){
    options.pauseOnError = pauseOnError;
  }

  var force = opts.get('force');
  if(force){
    options.force = true;
  }

  var store = opts.get('store');
  if(store){
    options.store = JSON.parse(store);
  }

  var rowNum = opts.get('rownum');
  if(rowNum) {
    options.rowNum = Number(rowNum);
  }

  var saucelabs = opts.get('saucelabs');
  if(saucelabs) {
    options.saucelabs = true;
  }

  var WdCT = require('../src/wd-ct');
  new WdCT( options );
}

