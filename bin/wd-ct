#!/usr/bin/env node

// Run WdCT.
var opts = require('opts'),
    prompt = require('prompt'),
    fs = require('fs'),
    options = {};

opts.parse([
  {
    'short': 't',
    'long': 'testcase',
    'description': 'Target testcase file',
    'value': true
  },
  {
    'short': 'i',
    'long': 'interaction',
    'description': 'Target interaction file',
    'value': true
  },
  {
    'short': 'nl',
    'long': 'no-logging',
    'description': 'Not output logging',
  },
  {
    'short': 'b',
    'long': 'browsers',
    'description': 'Browser ( comma separatted )',
    'value': true
  },
  {
    'short': 'nc',
    'long': 'no-color',
    'description': 'Not apply color to console',
  },
  {
    'short': 's',
    'long': 'scaffold',
    'description': 'Generate sample script and csv from template'
  },
  {
    'short': 'sw',
    'long': 'stepwise',
    'description': 'Stepwise execution'
  },
  {
    'short': 'sc',
    'long': 'startcolumn',
    'description': 'Interation start column index number should be set',
    'value': true
  },
  {
    'short': 'es',
    'long': 'errorscreenshot',
    'description': 'Capture page when error occurred. please set captured image directory path',
    'value': true
  },
  {
    'short': 'f',
    'long': 'force',
    'description': 'Continue to execute test even though error occurred'
  },
  {
    'short': 'h',
    'long': 'help',
    'description': 'Display usage'
  }
]);

if(opts.get('scaffold')){
  prompt.message = '';
  prompt.message = '';
  prompt.start();
  prompt.get({
    properties: {
      ok_to_create_testcase: {
        pattern: /^y|n$/,
        description: 'Are you sure you want to generate testcase? (y / n)',
        default: 'y',
        required: true,
        delimiter: ':'
      },
      testcase: {
        pattern: /^.*\.(csv|xls|xlsx)$/,
        description: 'Input testcase file name.( csv, xls, xlsx extension is permitted )',
        default: 'testcase.csv',
        required: true,
        delimiter: ':'
      },
      ok_to_create_interaction: {
        pattern: /^y|n$/,
        description: 'Are you sure you want to generate interaction.js? (y / n)',
        default: 'y',
        required: true,
        delimiter: ':'
      },
      interaction: {
        pattern: /^.*\.js$/,
        description: 'Input interaction script name',
        default: 'interaction.js',
        required: true,
        delimiter: ':'
      }
    }
  }, function(err, results){
    if(results.ok_to_create_testcase) {
      fs.createReadStream(__dirname+'/../template/testcase.csv').pipe(fs.createWriteStream(results.testcase));
    } else if(results.ok_to_create_interaction){
      fs.createReadStream(__dirname+'/../template/interaction.js').pipe(fs.createWriteStream(results.interaction));
    }
  });
  

} else {

  options.testcase = opts.get('testcase');
  options.interaction = opts.get('interaction');

  if( (!options.testcase && !options.interaction) || 
        opts.get('help')){

    console.log(
      '##############################################\n'+
      '#  ██╗    ██╗██████╗        ██████╗████████╗ #\n'+
      '#  ██║    ██║██╔══██╗      ██╔════╝╚══██╔══╝ #\n'+
      '#  ██║ █╗ ██║██║  ██║█████╗██║        ██║    #\n'+
      '#  ██║███╗██║██║  ██║╚════╝██║        ██║    #\n'+
      '#  ╚███╔███╔╝██████╔╝      ╚██████╗   ██║    #\n'+
      '#   ╚══╝╚══╝ ╚═════╝        ╚═════╝   ╚═╝    #\n'+
      '##############################################\n'
    );
    opts.help();
    process.exit();
  }

  var noLogging = opts.get('no-logging');
  if(noLogging) {
    options.debug = false;
  }

  var noColor = opts.get('no-color');
  if(noColor) {
    options.color = false;
  }

  var browsers = opts.get('browsers');
  if(browsers){
    options.browsers =  browsers.split(',');
  }

  var stepwise = opts.get('stepwise');
  if(stepwise){
    options.stepwise = true;
  }

  var startColumn = opts.get('startcolumn');
  if(startColumn){
    options.startColumn = startColumn;
  }


  var WdCT = require('../src/wd-ct');
  new WdCT( options );
}

